Windows PowerShell
Copyright (C) Microsoft Corporation. All rights reserved.

Install the latest PowerShell for new features and improvements! https://aka.ms/PSWindows

PS C:\Users\nizam> cd "C:\Program Files\PostgreSQL\17\bin"
PS C:\Program Files\PostgreSQL\17\bin> psql -U postgres
Password for user postgres:

psql (17.6)
WARNING: Console code page (437) differs from Windows code page (1252)
         8-bit characters might not work correctly. See psql reference
         page "Notes for Windows users" for details.
Type "help" for help.

postgres=# SELECT * FROM employees;
ERROR:  character with byte sequence 0xd0 0x9e in encoding "UTF8" has no equivalent in encoding "WIN1252"
postgres=# CREATE TABLE employees (
postgres(#     id SERIAL PRIMARY KEY,
postgres(#     name VARCHAR(100),
postgres(#     department VARCHAR(50),
postgres(#     salary NUMERIC(10,2)
postgres(# );
CREATE TABLE
postgres=# CREATE TABLE products (
postgres(#     id SERIAL PRIMARY KEY,
postgres(#     product_name VARCHAR(100),
postgres(#     price NUMERIC(10,2)
postgres(# );
CREATE TABLE
postgres=# CREATE TABLE customers (
postgres(#     id SERIAL PRIMARY KEY,
postgres(#     customer_name VARCHAR(100),
postgres(#     email VARCHAR(100)
postgres(# );
CREATE TABLE
postgres=# CREATE TABLE users (
postgres(#     id SERIAL PRIMARY KEY,
postgres(#     email VARCHAR(100)
postgres(# );
CREATE TABLE
postgres=#
postgres=# CREATE TABLE sales (
postgres(#     id SERIAL PRIMARY KEY,
postgres(#     employee_id INT REFERENCES employees(id),
postgres(#     amount NUMERIC(10,2)
postgres(# );
CREATE TABLE
postgres=# INSERT INTO employees (name, department, salary) VALUES
postgres-# ('Alice', 'Engineering', 95000),
postgres-# ('Bob', 'Engineering', 120000),
postgres-# ('Charlie', 'Sales', 70000),
postgres-# ('Diana', 'HR', 60000),
postgres-# ('Eve', 'Sales', 80000);
INSERT 0 5
postgres=#
postgres=# INSERT INTO products (product_name, price) VALUES
postgres-# ('Apple', 25.00),
postgres-# ('Banana', 15.00),
postgres-# ('Blueberry', 45.00),
postgres-# ('Strawberry', 50.00);
INSERT 0 4
postgres=# INSERT INTO customers (customer_name, email) VALUES
postgres-# ('Brandon', 'brandon@gmail.com'),
postgres-# ('Brad', 'brad@yahoo.com'),
postgres-# ('Samantha', 'sam@outlook.com'),
postgres-# ('Brian', 'brian@gmail.com');
INSERT 0 4
postgres=# INSERT INTO users (email) VALUES
postgres-# ('alex@gmail.com'),
postgres-# ('ben@hotmail.com'),
postgres-# ('cindy@gmail.com');
INSERT 0 3
postgres=# INSERT INTO sales (employee_id, amount) VALUES
postgres-# (1, 800),
postgres-# (2, 1500),
postgres-# (3, 1200),
postgres-# (5, 500);
INSERT 0 4
postgres=# SELECT * FROM employees;
 id |  name   | department  |  salary
----+---------+-------------+-----------
  1 | Alice   | Engineering |  95000.00
  2 | Bob     | Engineering | 120000.00
  3 | Charlie | Sales       |  70000.00
  4 | Diana   | HR          |  60000.00
  5 | Eve     | Sales       |  80000.00
(5 rows)


postgres=# SELECT name, department FROM employees;
  name   | department
---------+-------------
 Alice   | Engineering
 Bob     | Engineering
 Charlie | Sales
 Diana   | HR
 Eve     | Sales
(5 rows)


postgres=# SELECT name, salary, salary * 0.10 AS potential_bonus
postgres-# FROM employees;
  name   |  salary   | potential_bonus
---------+-----------+-----------------
 Alice   |  95000.00 |       9500.0000
 Bob     | 120000.00 |      12000.0000
 Charlie |  70000.00 |       7000.0000
 Diana   |  60000.00 |       6000.0000
 Eve     |  80000.00 |       8000.0000
(5 rows)


postgres=# SELECT name, salary
postgres-# FROM employees
postgres-# WHERE department = 'Sales';
  name   |  salary
---------+----------
 Charlie | 70000.00
 Eve     | 80000.00
(2 rows)


postgres=# SELECT name
postgres-# FROM employees
postgres-# WHERE salary > 75000 AND department = 'Engineering';
 name
-------
 Alice
 Bob
(2 rows)


postgres=# SELECT product_name, price
postgres-# FROM products
postgres-# WHERE price BETWEEN 20 AND 50;
 product_name | price
--------------+-------
 Apple        | 25.00
 Blueberry    | 45.00
 Strawberry   | 50.00
(3 rows)


postgres=# SELECT customer_name
postgres-# FROM customers
postgres-# WHERE customer_name LIKE 'Bra%';
 customer_name
---------------
 Brandon
 Brad
(2 rows)


postgres=#
postgres=# SELECT product_name
postgres-# FROM products
postgres-# WHERE product_name LIKE '%berry';
 product_name
--------------
 Blueberry
 Strawberry
(2 rows)


postgres=# SELECT email
postgres-# FROM users
postgres-# WHERE email ILIKE '%@gmail.com';
      email
-----------------
 alex@gmail.com
 cindy@gmail.com
(2 rows)


postgres=# SELECT name
postgres-# FROM employees
postgres-# WHERE name ~ '^[AB]';
 name
-------
 Alice
 Bob
(2 rows)


postgres=# SELECT email
postgres-# FROM users
postgres-# WHERE email ~* '^[A-Z0-9._%+-]+@[A-Z0-9.-]+\.[A-Z]{2,}$';
      email
-----------------
 alex@gmail.com
 ben@hotmail.com
 cindy@gmail.com
(3 rows)


postgres=# SELECT name, department
postgres-# FROM employees
postgres-# WHERE department_id IN (3, 5, 7);
ERROR:  character with byte sequence 0xd0 0x9e in encoding "UTF8" has no equivalent in encoding "WIN1252"
postgres=# -- Or with a subquery
postgres=# SELECT name
postgres-# FROM employees
postgres-# WHERE id IN (SELECT employee_id FROM sales WHERE amount > 1000);
  name
---------
 Bob
 Charlie
(2 rows)


postgres=# SELECT name
postgres-# FROM employees e
postgres-# WHERE EXISTS (
postgres(#   SELECT 1
postgres(#   FROM sales s
postgres(#   WHERE s.employee_id = e.id AND s.amount > 1000
postgres(# );
  name
---------
 Bob
 Charlie
(2 rows)


postgres=# SELECT name, salary,
postgres-#   CASE
postgres-#     WHEN salary > 100000 THEN 'Senior'
postgres-#     WHEN salary BETWEEN 60000 AND 100000 THEN 'Mid-Level'
postgres-#     ELSE 'Junior'
postgres-#   END AS employee_level
postgres-# FROM employees;
  name   |  salary   | employee_level
---------+-----------+----------------
 Alice   |  95000.00 | Mid-Level
 Bob     | 120000.00 | Senior
 Charlie |  70000.00 | Mid-Level
 Diana   |  60000.00 | Mid-Level
 Eve     |  80000.00 | Mid-Level
(5 rows)


postgres=# WITH department_averages AS (
postgres(#   SELECT
postgres(#     department,
postgres(#     AVG(salary) AS avg_salary
postgres(#   FROM employees
postgres(#   GROUP BY department
postgres(# )
postgres-#
postgres-# SELECT
postgres-#   e.name,
postgres-#   e.salary,
postgres-#   e.department,
postgres-#   da.avg_salary
postgres-# FROM employees e
postgres-# JOIN department_averages da ON e.department = da.department
postgres-# WHERE e.salary > da.avg_salary;
 name |  salary   | department  |     avg_salary
------+-----------+-------------+---------------------
 Bob  | 120000.00 | Engineering | 107500.000000000000
 Eve  |  80000.00 | Sales       |  75000.000000000000
(2 rows)


postgres=#