Windows PowerShell
Copyright (C) Microsoft Corporation. All rights reserved.

Install the latest PowerShell for new features and improvements! https://aka.ms/PSWindows

PS C:\Users\nizam> cd "C:\Program Files\PostgreSQL\17\bin"
PS C:\Program Files\PostgreSQL\17\bin> psql -U postgres
Password for user postgres:

psql: error: connection to server at "localhost" (::1), port 5432 failed: FATAL:  password authentication failed for user "postgres"
PS C:\Program Files\PostgreSQL\17\bin> CREATE TABLE accounts (
>>     account_id SERIAL PRIMARY KEY,
>>     account_name VARCHAR(50),
>>     balance NUMERIC(10,2)
>> );
account_id : The term 'account_id' is not recognized as the name of a cmdlet, function, script file, or operable progra
m. Check the spelling of the name, or if a path was included, verify that the path is correct and try again.
At line:2 char:5
+     account_id SERIAL PRIMARY KEY,
+     ~~~~~~~~~~
    + CategoryInfo          : ObjectNotFound: (account_id:String) [], CommandNotFoundException
    + FullyQualifiedErrorId : CommandNotFoundException

PS C:\Program Files\PostgreSQL\17\bin> psql -U postgres
Password for user postgres:

psql (17.6)
WARNING: Console code page (437) differs from Windows code page (1252)
         8-bit characters might not work correctly. See psql reference
         page "Notes for Windows users" for details.
Type "help" for help.

postgres=# CREATE TABLE accounts (
postgres(#     account_id SERIAL PRIMARY KEY,
postgres(#     account_name VARCHAR(50),
postgres(#     balance NUMERIC(10,2)
postgres(# );
CREATE TABLE
postgres=#
postgres=# INSERT INTO accounts (account_name, balance) VALUES
postgres-# ('Alice', 1000.00),
postgres-# ('Bob', 500.00),
postgres-# ('Charlie', 1500.00);
INSERT 0 3
postgres=# CREATE TABLE customers (
postgres(#     customer_id SERIAL PRIMARY KEY,
postgres(#     name VARCHAR(50),
postgres(#     email VARCHAR(100)
postgres(# );
ERROR:  character with byte sequence 0xd0 0x9e in encoding "UTF8" has no equivalent in encoding "WIN1252"
postgres=# CREATE TABLE customers (
postgres(#     customer_id SERIAL PRIMARY KEY,
postgres(#     name VARCHAR(50),
postgres(#     email VARCHAR(100)
postgres(# );
CREATE TABLE
postgres=# INSERT INTO customers (name, email) VALUES
postgres-# ('Alice', 'alice@example.com'),
postgres-# ('Bob', 'bob@example.com'),
postgres-# ('Charlie', 'charlie@example.com');
INSERT 0 3
postgres=# CREATE TABLE orders (
postgres(#     order_id SERIAL PRIMARY KEY,
postgres(#     customer_id INT REFERENCES customers(customer_id),
postgres(#     total NUMERIC(10,2)
postgres(# );
CREATE TABLE
postgres=# INSERT INTO orders (customer_id, total) VALUES
postgres-# (1, 200.00),
postgres-# (2, 150.00);
INSERT 0 2
postgres=# CREATE TABLE order_items (
postgres(#     order_item_id SERIAL PRIMARY KEY,
postgres(#     order_id INT REFERENCES orders(order_id),
postgres(#     product_id INT,
postgres(#     quantity INT
postgres(# );
CREATE TABLE
postgres=# INSERT INTO order_items (order_id, product_id, quantity) VALUES
postgres-# (1, 101, 2),
postgres-# (2, 102, 1);
INSERT 0 2
postgres=# CREATE TABLE inventory (
postgres(#     product_id INT PRIMARY KEY,
postgres(#     product_name VARCHAR(50),
postgres(#     stock INT
postgres(# );
CREATE TABLE
postgres=# INSERT INTO inventory (product_id, product_name, stock) VALUES
postgres-# (101, 'Laptop', 10),
postgres-# (102, 'Mouse', 50),
postgres-# (103, 'Keyboard', 30);
INSERT 0 3
postgres=# CREATE TABLE products (
postgres(#     product_id SERIAL PRIMARY KEY,
postgres(#     name VARCHAR(50),
postgres(#     price NUMERIC(10,2)
postgres(# );
CREATE TABLE
postgres=# INSERT INTO products (name, price) VALUES
postgres-# ('Laptop', 999.99),
postgres-# ('Mouse', 25.99),
postgres-# ('Keyboard', 79.99);
INSERT 0 3
postgres=# CREATE TABLE logs (
postgres(#     log_id SERIAL PRIMARY KEY,
postgres(#     message TEXT,
postgres(#     created_at TIMESTAMP DEFAULT NOW()
postgres(# );
CREATE TABLE
postgres=# CREATE TABLE audit_log (
postgres(#     audit_id SERIAL PRIMARY KEY,
postgres(#     action VARCHAR(50),
postgres(#     timestamp TIMESTAMP DEFAULT NOW()
postgres(# );
CREATE TABLE
postgres=# BEGIN;
BEGIN
postgres=*# BEGIN TRANSACTION;
ERROR:  character with byte sequence 0xd0 0x9f in encoding "UTF8" has no equivalent in encoding "WIN1252"
postgres=!# START TRANSACTION;
ERROR:  character with byte sequence 0xd0 0x9e in encoding "UTF8" has no equivalent in encoding "WIN1252"
postgres=!# BEGIN;
ERROR:  character with byte sequence 0xd0 0x9e in encoding "UTF8" has no equivalent in encoding "WIN1252"
postgres=!# UPDATE accounts SET balance = balance - 100 WHERE account_id = 1;
ERROR:  character with byte sequence 0xd0 0x9e in encoding "UTF8" has no equivalent in encoding "WIN1252"
postgres=!# ;
postgres=!# UPDATE accounts SET balance = balance - 100 WHERE account_id = 1;
ERROR:  character with byte sequence 0xd0 0x9e in encoding "UTF8" has no equivalent in encoding "WIN1252"
postgres=!# UPDATE accounts SET balance = balance + 100 WHERE account_id = 2;
ERROR:  character with byte sequence 0xd0 0x9e in encoding "UTF8" has no equivalent in encoding "WIN1252"
postgres=!# COMMIT;
ROLLBACK
postgres=# BEGIN;
BEGIN
postgres=*# UPDATE accounts SET balance = balance - 100 WHERE account_id = 1;
UPDATE 1
postgres=*# UPDATE accounts SET balance = balance + 100 WHERE account_id = 2;
UPDATE 1
postgres=*# COMMIT;
COMMIT
postgres=# BEGIN;
BEGIN
postgres=*# UPDATE accounts SET balance = balance - 100 WHERE account_id = 1;
UPDATE 1
postgres=*# UPDATE accounts SET balance = balance + 100 WHERE account_id = 2;
UPDATE 1
postgres=*# ROLLBACK;
ROLLBACK
postgres=# BEGIN;
BEGIN
postgres=*# SELECT balance FROM accounts WHERE account_id = 1;
 balance
---------
  900.00
(1 row)


postgres=*# UPDATE accounts SET balance = balance - 500 WHERE account_id = 1;
UPDATE 1
postgres=*# UPDATE accounts SET balance = balance + 500 WHERE account_id = 2;
UPDATE 1
postgres=*# COMMIT;
COMMIT
postgres=# BEGIN;
BEGIN
postgres=*# INSERT INTO orders (customer_id, total) VALUES (1, 250.00);
INSERT 0 1
postgres=*# INSERT INTO order_items (order_id, product_id, quantity) VALUES (1, 101, 2);
INSERT 0 1
postgres=*# UPDATE inventory SET stock = stock - 2 WHERE product_id = 101;
UPDATE 1
postgres=*# COMMIT;
COMMIT
postgres=# BEGIN;
BEGIN
postgres=*# INSERT INTO customers (name, email) VALUES ('John Doe', 'john@email.com');
INSERT 0 1
postgres=*# INSERT INTO orders (customer_id, total) VALUES (LASTVAL(), 100.00);
INSERT 0 1
postgres=*# COMMIT;
COMMIT
postgres=# BEGIN TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;
BEGIN
postgres=*# SELECT * FROM accounts;
 account_id | account_name | balance
------------+--------------+---------
          3 | Charlie      | 1500.00
          1 | Alice        |  400.00
          2 | Bob          | 1100.00
(3 rows)


postgres=*# COMMIT;
COMMIT
postgres=# BEGIN TRANSACTION ISOLATION LEVEL READ COMMITTED;
BEGIN
postgres=*# SELECT * FROM accounts WHERE balance > 1000;
 account_id | account_name | balance
------------+--------------+---------
          3 | Charlie      | 1500.00
          2 | Bob          | 1100.00
(2 rows)


postgres=*# SELECT * FROM accounts WHERE balance > 1000;
 account_id | account_name | balance
------------+--------------+---------
          3 | Charlie      | 1500.00
          2 | Bob          | 1100.00
(2 rows)


postgres=*# COMMIT;
COMMIT
postgres=# BEGIN TRANSACTION ISOLATION LEVEL REPEATABLE READ;
BEGIN
postgres=*# SELECT * FROM accounts WHERE balance > 1000;
 account_id | account_name | balance
------------+--------------+---------
          3 | Charlie      | 1500.00
          2 | Bob          | 1100.00
(2 rows)


postgres=*# SELECT * FROM accounts WHERE balance > 1000;
 account_id | account_name | balance
------------+--------------+---------
          3 | Charlie      | 1500.00
          2 | Bob          | 1100.00
(2 rows)


postgres=*# COMMIT;
COMMIT
postgres=# BEGIN TRANSACTION ISOLATION LEVEL SERIALIZABLE;
BEGIN
postgres=*# SELECT * FROM accounts;
 account_id | account_name | balance
------------+--------------+---------
          3 | Charlie      | 1500.00
          1 | Alice        |  400.00
          2 | Bob          | 1100.00
(3 rows)


postgres=*# UPDATE accounts SET balance = balance * 1.05;
UPDATE 3
postgres=*# COMMIT;
COMMIT
postgres=# SET TRANSACTION ISOLATION LEVEL REPEATABLE READ;
ERROR:  character with byte sequence 0xd0 0x9f in encoding "UTF8" has no equivalent in encoding "WIN1252"
postgres=# BEGIN;
BEGIN
postgres=*# INSERT INTO customers (name, email) VALUES ('Alice', 'alice@email.com');
INSERT 0 1
postgres=*# SAVEPOINT after_customer_insert;
SAVEPOINT
postgres=*# INSERT INTO orders (customer_id, total) VALUES (1, 500.00);
INSERT 0 1
postgres=*# ROLLBACK TO SAVEPOINT after_customer_insert;
ROLLBACK
postgres=*# INSERT INTO orders (customer_id, total) VALUES (1, 300.00);
INSERT 0 1
postgres=*# COMMIT;
COMMIT
postgres=# BEGIN;
BEGIN
postgres=*# INSERT INTO products (name, price) VALUES ('Laptop', 999.99);
INSERT 0 1
postgres=*# SAVEPOINT sp1;
SAVEPOINT
postgres=*# INSERT INTO products (name, price) VALUES ('Mouse', 25.99);
INSERT 0 1
postgres=*# SAVEPOINT sp2;
SAVEPOINT
postgres=*#
postgres=*# INSERT INTO products (name, price) VALUES ('Invalid Product', -50.00);
INSERT 0 1
postgres=*# -- This violates business rules
postgres=*#
postgres=*# ROLLBACK TO SAVEPOINT sp2; -- Removes invalid product insert
ROLLBACK
postgres=*# -- Laptop and Mouse inserts are still active
postgres=*#
postgres=*# INSERT INTO products (name, price) VALUES ('Keyboard', 79.99);
INSERT 0 1
postgres=*#
postgres=*# COMMIT; BEGIN;
COMMIT
BEGIN
postgres=*# INSERT INTO logs (message) VALUES ('Starting process');
INSERT 0 1
postgres=*# SAVEPOINT process_start;
SAVEPOINT
postgres=*#
postgres=*# -- Do some work
postgres=*# INSERT INTO logs (message) VALUES ('Process completed');
INSERT 0 1
postgres=*# RELEASE SAVEPOINT process_start;
RELEASE
postgres=*#
postgres=*# COMMIT;
COMMIT
postgres=# BEGIN;
BEGIN
postgres=*# UPDATE inventory SET stock = stock - 1 WHERE product_id = 101;
UPDATE 1
postgres=*# INSERT INTO order_items (order_id, product_id, quantity) VALUES (1, 101, 1);
INSERT 0 1
postgres=*# COMMIT;
COMMIT
postgres=# BEGIN;
BEGIN
postgres=*# DO $$
postgres$*# DECLARE
postgres$*#     insufficient_funds EXCEPTION;
postgres$*# current_balance DECIMAL;
postgres$*# BEGIN
postgres$*#     SELECT balance INTO current_balance FROM accounts WHERE account_id = 1;
postgres$*# IF current_balance < 100 THEN
postgres$*#         RAISE insufficient_funds;
postgres$*#     END IF;
postgres$*#
postgres$*#     UPDATE accounts SET balance = balance - 100 WHERE account_id = 1;
postgres$*#     UPDATE accounts SET balance = balance + 100 WHERE account_id = 2;
postgres$*#
postgres$*# EXCEPTION
postgres$*#     WHEN insufficient_funds THEN
postgres$*#         RAISE NOTICE 'Transaction failed: Insufficient funds';
postgres$*#         ROLLBACK;
postgres$*# END $$;
ERROR:  character with byte sequence 0xd0 0x9e in encoding "UTF8" has no equivalent in encoding "WIN1252"
postgres=!# BEGIN;
ERROR:  character with byte sequence 0xd0 0x9e in encoding "UTF8" has no equivalent in encoding "WIN1252"
postgres=!# DO $$
postgres$!# DECLARE
postgres$!#     insufficient_funds EXCEPTION;
postgres$!#     current_balance DECIMAL;
postgres$!# BEGIN
postgres$!#     SELECT balance INTO current_balance FROM accounts WHERE account_id = 1;
postgres$!#
postgres$!#     IF current_balance < 100 THEN
postgres$!#         RAISE insufficient_funds;
postgres$!#     END IF;
postgres$!#
postgres$!#     UPDATE accounts SET balance = balance - 100 WHERE account_id = 1;
postgres$!#     UPDATE accounts SET balance = balance + 100 WHERE account_id = 2;
postgres$!#
postgres$!# EXCEPTION
postgres$!#     WHEN insufficient_funds THEN
postgres$!#         RAISE NOTICE 'Transaction failed: Insufficient funds';
postgres$!#         ROLLBACK;
postgres$!# END $$;
ERROR:  character with byte sequence 0xd0 0x9e in encoding "UTF8" has no equivalent in encoding "WIN1252"
postgres=!# BEGIN TRANSACTION ISOLATION LEVEL SERIALIZABLE;
ERROR:  character with byte sequence 0xd0 0x9e in encoding "UTF8" has no equivalent in encoding "WIN1252"
postgres=!# COMMIT;
ROLLBACK
postgres=# BEGIN TRANSACTION ISOLATION LEVEL READ COMMITTED;
BEGIN
postgres=*# COMMIT;
COMMIT
postgres=# BEGIN;
BEGIN
postgres=*#
postgres=*# -- Main operation
postgres=*# INSERT INTO orders (customer_id, total) VALUES (1, 1000.00);
INSERT 0 1
postgres=*#
postgres=*# SAVEPOINT before_items;
SAVEPOINT
postgres=*#
postgres=*# -- Add items (might fail for some items)
postgres=*# INSERT INTO order_items (order_id, product_id, quantity)
postgres-*# VALUES (currval('orders_id_seq'), 101, 2);
ERROR:  character with byte sequence 0xd0 0x9e in encoding "UTF8" has no equivalent in encoding "WIN1252"
postgres=!#
postgres=!# -- If this fails, rollback to savepoint and continue
postgres=!# INSERT INTO order_items (order_id, product_id, quantity)
postgres-!# VALUES (currval('orders_id_seq'), 102, 1);
ERROR:  character with byte sequence 0xd0 0x9e in encoding "UTF8" has no equivalent in encoding "WIN1252"
postgres=!#
postgres=!# COMMIT;
ROLLBACK
postgres=# BEGIN;
BEGIN
postgres=*# INSERT INTO orders (customer_id, total) VALUES (1, 1000.00);
INSERT 0 1
postgres=*# SAVEPOINT before_items;
SAVEPOINT
postgres=*# INSERT INTO order_items (order_id, product_id, quantity)
postgres-*# VALUES (currval('orders_id_seq'), 101, 2);
ERROR:  character with byte sequence 0xd0 0x9e in encoding "UTF8" has no equivalent in encoding "WIN1252"
postgres=!# INSERT INTO order_items (order_id, product_id, quantity)
postgres-!# VALUES (currval('orders_id_seq'), 102, 1);
ERROR:  character with byte sequence 0xd0 0x9e in encoding "UTF8" has no equivalent in encoding "WIN1252"
postgres=!# ROLLBACK;
ROLLBACK
postgres=# INSERT INTO order_items (order_id, product_id, quantity)
postgres-# VALUES (currval('orders_id_seq'), 102, 1);
ERROR:  character with byte sequence 0xd0 0x9e in encoding "UTF8" has no equivalent in encoding "WIN1252"
postgres=# ROLLBACK;
ERROR:  character with byte sequence 0xd0 0x9f in encoding "UTF8" has no equivalent in encoding "WIN1252"
postgres=# ROLLBACK;
ERROR:  character with byte sequence 0xd0 0x9f in encoding "UTF8" has no equivalent in encoding "WIN1252"
postgres=# INSERT INTO order_items (order_id, product_id, quantity)
postgres-# VALUES (currval('orders_id_seq'), 102, 1);
ERROR:  character with byte sequence 0xd0 0x9e in encoding "UTF8" has no equivalent in encoding "WIN1252"
postgres=# COMMIT;
ERROR:  character with byte sequence 0xd0 0x9f in encoding "UTF8" has no equivalent in encoding "WIN1252"
postgres=# SELECT
postgres-#     blocked_locks.pid AS blocked_pid,
postgres-#     blocked_activity.usename AS blocked_user,
postgres-#     blocking_locks.pid AS blocking_pid,
postgres-#     blocking_activity.usename AS blocking_user,
postgres-#     blocked_activity.query AS blocked_statement
postgres-# FROM pg_catalog.pg_locks blocked_locks
postgres-# JOIN pg_catalog.pg_stat_activity blocked_activity
postgres-#     ON blocked_activity.pid = blocked_locks.pid
postgres-# JOIN pg_catalog.pg_locks blocking_locksON blocking_locks.locktype = blocked_locks.locktype
postgres-# WHERE NOT blocked_locks.granted;
ERROR:  character with byte sequence 0xd0 0x9e in encoding "UTF8" has no equivalent in encoding "WIN1252"
postgres=# BEGIN;
BEGIN
postgres=*# INSERT INTO audit_log (action, timestamp) VALUES ('user_creation', NOW());
INSERT 0 1
postgres=*# INSERT INTO users (name, email) VALUES ('John Doe', 'john@example.com');
ERROR:  character with byte sequence 0xd0 0x9e in encoding "UTF8" has no equivalent in encoding "WIN1252"
postgres=!# INSERT INTO user_preferences (user_id, theme) VALUES (currval('users_id_seq'), 'dark');
ERROR:  character with byte sequence 0xd0 0x9e in encoding "UTF8" has no equivalent in encoding "WIN1252"
postgres=!# COMMIT;
ROLLBACK
postgres=# INSERT INTO audit_log (action, timestamp) VALUES ('user_creation', NOW());
INSERT 0 1
postgres=# -- If this fails, the audit log entry above is already committed
postgres=# INSERT INTO users (name, email) VALUES ('John Doe', 'john@example.com');
